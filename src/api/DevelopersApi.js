/**
 * IOTA Dashboard API
 * Example of agreggating IOTA transactions from IoT devices
 *
 * OpenAPI spec version: 1.0.0
 * Contact: david@dmwl.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Transaction'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Transaction'));
  } else {
    // Browser globals (root is window)
    if (!root.IotaDashboardApi) {
      root.IotaDashboardApi = {};
    }
    root.IotaDashboardApi.DevelopersApi = factory(root.IotaDashboardApi.ApiClient, root.IotaDashboardApi.Transaction);
  }
}(this, function(ApiClient, Transaction) {
  'use strict';

  /**
   * Developers service.
   * @module api/DevelopersApi
   * @version 1.0.0
   */

  /**
   * Constructs a new DevelopersApi. 
   * @alias module:api/DevelopersApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getAllTransaction operation.
     * @callback module:api/DevelopersApi~getAllTransactionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Transaction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * retrieve a list of transactions
     * List all transactions 
     * @param {module:api/DevelopersApi~getAllTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Transaction>}
     */
    this.getAllTransaction = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Transaction];

      return this.apiClient.callApi(
        '/transaction', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransaction operation.
     * @callback module:api/DevelopersApi~getTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Transaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * retrieve a particular transaction
     * Look up the details of a particular transaction using it&#39;s id (81 tryte hash) 
     * @param {String} transactionId pass an optional search string for looking up inventory
     * @param {module:api/DevelopersApi~getTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Transaction}
     */
    this.getTransaction = function(transactionId, callback) {
      var postBody = null;

      // verify the required parameter 'transactionId' is set
      if (transactionId == undefined || transactionId == null) {
        throw new Error("Missing the required parameter 'transactionId' when calling getTransaction");
      }


      var pathParams = {
        'transactionId': transactionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Transaction;

      return this.apiClient.callApi(
        '/transaction/{transactionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
